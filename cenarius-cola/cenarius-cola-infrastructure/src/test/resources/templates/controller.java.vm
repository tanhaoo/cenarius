package ${package.Controller};

import com.baomidou.mybatisplus.core.metadata.IPage;
import ${package.Service}.I${serviceName};
import ${dtoPackage}.command.${domainName}CreateCmd;
import ${dtoPackage}.command.${domainName}ReviseCmd;
import ${dtoPackage}.data.${domainName}DTO;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import javax.annotation.Resource;
import io.swagger.v3.oas.annotations.Parameter;


/**
 * <p>
 * ${domainName} Controller
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    @Resource
    private I${serviceName} ${lowerServiceName};

    @PostMapping(path = "/${lowerDomainName}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    public ${domainName}CreateCmd.${domainName}CreateCmdResult create${domainName}(@RequestBody ${domainName}CreateCmd cmd) {
        ${lowerServiceName}.create${domainName}(cmd);
        return cmd.getExecResult();
    }

    @PatchMapping(path = "/${lowerDomainName}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public void revise${domainName}(@RequestBody ${domainName}ReviseCmd cmd) {
        ${lowerServiceName}.revise${domainName}(cmd);
    }

    @DeleteMapping(path = "/${lowerDomainName}/{id}")
    @ResponseStatus(HttpStatus.OK)
    public void remove${domainName}(@PathVariable String id) {
        ${lowerServiceName}.remove${domainName}(id);
    }

    @GetMapping(path = "/${lowerDomainName}/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ${domainName}DTO get${domainName}ById(@PathVariable String id) {
        return ${lowerServiceName}.get${domainName}ById(id);
    }

    @GetMapping(path = "/${lowerDomainName}")
    @ResponseStatus(HttpStatus.OK)
    public IPage<${domainName}DTO> get${domainName}ByPageList(@RequestParam(value = "page", required = false, defaultValue = "1") @Parameter(description = "For the page param, page number", example = "1") Long page,
                                        @RequestParam(value = "pageSize", required = false, defaultValue = "10") @Parameter(description = "For the pageSize param, page size", example = "10") Long pageSize) {
        return ${lowerServiceName}.getListByPage(page, pageSize);
    }
}
#end
